/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthenticatedRootImport } from './routes/_authenticated/_root'
import { Route as AuthenticatedRootSearchImport } from './routes/_authenticated/_root/search'

// Create Virtual Routes

const SignupLazyImport = createFileRoute('/signup')()
const LogoutLazyImport = createFileRoute('/logout')()
const LoginLazyImport = createFileRoute('/login')()
const AuthenticatedAccountLazyImport = createFileRoute(
  '/_authenticated/account',
)()
const AuthenticatedRootIndexLazyImport = createFileRoute(
  '/_authenticated/_root/',
)()
const AuthenticatedRootSeriesLazyImport = createFileRoute(
  '/_authenticated/_root/series',
)()
const AuthenticatedRootMoviesLazyImport = createFileRoute(
  '/_authenticated/_root/movies',
)()
const AuthenticatedRootBookmarkedLazyImport = createFileRoute(
  '/_authenticated/_root/bookmarked',
)()

// Create/Update Routes

const SignupLazyRoute = SignupLazyImport.update({
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signup.lazy').then((d) => d.Route))

const LogoutLazyRoute = LogoutLazyImport.update({
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/logout.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedAccountLazyRoute = AuthenticatedAccountLazyImport.update({
  path: '/account',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() =>
  import('./routes/_authenticated/account.lazy').then((d) => d.Route),
)

const AuthenticatedRootRoute = AuthenticatedRootImport.update({
  id: '/_root',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedRootIndexLazyRoute = AuthenticatedRootIndexLazyImport.update(
  {
    path: '/',
    getParentRoute: () => AuthenticatedRootRoute,
  } as any,
).lazy(() =>
  import('./routes/_authenticated/_root/index.lazy').then((d) => d.Route),
)

const AuthenticatedRootSeriesLazyRoute =
  AuthenticatedRootSeriesLazyImport.update({
    path: '/series',
    getParentRoute: () => AuthenticatedRootRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/_root/series.lazy').then((d) => d.Route),
  )

const AuthenticatedRootMoviesLazyRoute =
  AuthenticatedRootMoviesLazyImport.update({
    path: '/movies',
    getParentRoute: () => AuthenticatedRootRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/_root/movies.lazy').then((d) => d.Route),
  )

const AuthenticatedRootBookmarkedLazyRoute =
  AuthenticatedRootBookmarkedLazyImport.update({
    path: '/bookmarked',
    getParentRoute: () => AuthenticatedRootRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/_root/bookmarked.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedRootSearchRoute = AuthenticatedRootSearchImport.update({
  path: '/search',
  getParentRoute: () => AuthenticatedRootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      preLoaderRoute: typeof LogoutLazyImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      preLoaderRoute: typeof SignupLazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/_root': {
      preLoaderRoute: typeof AuthenticatedRootImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/account': {
      preLoaderRoute: typeof AuthenticatedAccountLazyImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/_root/search': {
      preLoaderRoute: typeof AuthenticatedRootSearchImport
      parentRoute: typeof AuthenticatedRootImport
    }
    '/_authenticated/_root/bookmarked': {
      preLoaderRoute: typeof AuthenticatedRootBookmarkedLazyImport
      parentRoute: typeof AuthenticatedRootImport
    }
    '/_authenticated/_root/movies': {
      preLoaderRoute: typeof AuthenticatedRootMoviesLazyImport
      parentRoute: typeof AuthenticatedRootImport
    }
    '/_authenticated/_root/series': {
      preLoaderRoute: typeof AuthenticatedRootSeriesLazyImport
      parentRoute: typeof AuthenticatedRootImport
    }
    '/_authenticated/_root/': {
      preLoaderRoute: typeof AuthenticatedRootIndexLazyImport
      parentRoute: typeof AuthenticatedRootImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  AuthenticatedRoute.addChildren([
    AuthenticatedRootRoute.addChildren([
      AuthenticatedRootSearchRoute,
      AuthenticatedRootBookmarkedLazyRoute,
      AuthenticatedRootMoviesLazyRoute,
      AuthenticatedRootSeriesLazyRoute,
      AuthenticatedRootIndexLazyRoute,
    ]),
    AuthenticatedAccountLazyRoute,
  ]),
  LoginLazyRoute,
  LogoutLazyRoute,
  SignupLazyRoute,
])

/* prettier-ignore-end */
