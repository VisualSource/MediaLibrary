/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthenticatedRootImport } from './routes/_authenticated/_root'
import { Route as AuthenticatedRootUserImport } from './routes/_authenticated/_root/_user'
import { Route as AuthenticatedRootContentImport } from './routes/_authenticated/_root/_content'
import { Route as AuthenticatedRootContentIndexImport } from './routes/_authenticated/_root/_content/index'
import { Route as AuthenticatedRootUserUploadImport } from './routes/_authenticated/_root/_user/upload'
import { Route as AuthenticatedRootUserAccountImport } from './routes/_authenticated/_root/_user/account'
import { Route as AuthenticatedRootContentSeriesImport } from './routes/_authenticated/_root/_content/series'
import { Route as AuthenticatedRootContentSearchImport } from './routes/_authenticated/_root/_content/search'
import { Route as AuthenticatedRootContentMoviesImport } from './routes/_authenticated/_root/_content/movies'
import { Route as AuthenticatedRootContentBookmarkedImport } from './routes/_authenticated/_root/_content/bookmarked'
import { Route as AuthenticatedRootContentContentUuidImport } from './routes/_authenticated/_root/_content/content.$uuid'

// Create Virtual Routes

const SignupLazyImport = createFileRoute('/signup')()
const LogoutLazyImport = createFileRoute('/logout')()
const LoginLazyImport = createFileRoute('/login')()

// Create/Update Routes

const SignupLazyRoute = SignupLazyImport.update({
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signup.lazy').then((d) => d.Route))

const LogoutLazyRoute = LogoutLazyImport.update({
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/logout.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRootRoute = AuthenticatedRootImport.update({
  id: '/_root',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedRootUserRoute = AuthenticatedRootUserImport.update({
  id: '/_user',
  getParentRoute: () => AuthenticatedRootRoute,
} as any)

const AuthenticatedRootContentRoute = AuthenticatedRootContentImport.update({
  id: '/_content',
  getParentRoute: () => AuthenticatedRootRoute,
} as any)

const AuthenticatedRootContentIndexRoute =
  AuthenticatedRootContentIndexImport.update({
    path: '/',
    getParentRoute: () => AuthenticatedRootContentRoute,
  } as any)

const AuthenticatedRootUserUploadRoute =
  AuthenticatedRootUserUploadImport.update({
    path: '/upload',
    getParentRoute: () => AuthenticatedRootUserRoute,
  } as any)

const AuthenticatedRootUserAccountRoute =
  AuthenticatedRootUserAccountImport.update({
    path: '/account',
    getParentRoute: () => AuthenticatedRootUserRoute,
  } as any)

const AuthenticatedRootContentSeriesRoute =
  AuthenticatedRootContentSeriesImport.update({
    path: '/series',
    getParentRoute: () => AuthenticatedRootContentRoute,
  } as any)

const AuthenticatedRootContentSearchRoute =
  AuthenticatedRootContentSearchImport.update({
    path: '/search',
    getParentRoute: () => AuthenticatedRootContentRoute,
  } as any)

const AuthenticatedRootContentMoviesRoute =
  AuthenticatedRootContentMoviesImport.update({
    path: '/movies',
    getParentRoute: () => AuthenticatedRootContentRoute,
  } as any)

const AuthenticatedRootContentBookmarkedRoute =
  AuthenticatedRootContentBookmarkedImport.update({
    path: '/bookmarked',
    getParentRoute: () => AuthenticatedRootContentRoute,
  } as any)

const AuthenticatedRootContentContentUuidRoute =
  AuthenticatedRootContentContentUuidImport.update({
    path: '/content/$uuid',
    getParentRoute: () => AuthenticatedRootContentRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      preLoaderRoute: typeof LogoutLazyImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      preLoaderRoute: typeof SignupLazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/_root': {
      preLoaderRoute: typeof AuthenticatedRootImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/_root/_content': {
      preLoaderRoute: typeof AuthenticatedRootContentImport
      parentRoute: typeof AuthenticatedRootImport
    }
    '/_authenticated/_root/_user': {
      preLoaderRoute: typeof AuthenticatedRootUserImport
      parentRoute: typeof AuthenticatedRootImport
    }
    '/_authenticated/_root/_content/bookmarked': {
      preLoaderRoute: typeof AuthenticatedRootContentBookmarkedImport
      parentRoute: typeof AuthenticatedRootContentImport
    }
    '/_authenticated/_root/_content/movies': {
      preLoaderRoute: typeof AuthenticatedRootContentMoviesImport
      parentRoute: typeof AuthenticatedRootContentImport
    }
    '/_authenticated/_root/_content/search': {
      preLoaderRoute: typeof AuthenticatedRootContentSearchImport
      parentRoute: typeof AuthenticatedRootContentImport
    }
    '/_authenticated/_root/_content/series': {
      preLoaderRoute: typeof AuthenticatedRootContentSeriesImport
      parentRoute: typeof AuthenticatedRootContentImport
    }
    '/_authenticated/_root/_user/account': {
      preLoaderRoute: typeof AuthenticatedRootUserAccountImport
      parentRoute: typeof AuthenticatedRootUserImport
    }
    '/_authenticated/_root/_user/upload': {
      preLoaderRoute: typeof AuthenticatedRootUserUploadImport
      parentRoute: typeof AuthenticatedRootUserImport
    }
    '/_authenticated/_root/_content/': {
      preLoaderRoute: typeof AuthenticatedRootContentIndexImport
      parentRoute: typeof AuthenticatedRootContentImport
    }
    '/_authenticated/_root/_content/content/$uuid': {
      preLoaderRoute: typeof AuthenticatedRootContentContentUuidImport
      parentRoute: typeof AuthenticatedRootContentImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  AuthenticatedRoute.addChildren([
    AuthenticatedRootRoute.addChildren([
      AuthenticatedRootContentRoute.addChildren([
        AuthenticatedRootContentBookmarkedRoute,
        AuthenticatedRootContentMoviesRoute,
        AuthenticatedRootContentSearchRoute,
        AuthenticatedRootContentSeriesRoute,
        AuthenticatedRootContentIndexRoute,
        AuthenticatedRootContentContentUuidRoute,
      ]),
      AuthenticatedRootUserRoute.addChildren([
        AuthenticatedRootUserAccountRoute,
        AuthenticatedRootUserUploadRoute,
      ]),
    ]),
  ]),
  LoginLazyRoute,
  LogoutLazyRoute,
  SignupLazyRoute,
])

/* prettier-ignore-end */
